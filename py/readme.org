* Python
Learning Python language.

** DONE Day 01
1. How ~__main__~, ~sys.argv~ work.
2. function definitions.
3. doctest examples.
4. ~for~, ~while~ loops and also assignment expressions.
5. ~map~ function and ~lambda~.


** DONE Day 02
1. ~Enum~ enumerations
2. Classes, ~__init__~, ~__str__~.
3. Arrays

** DONE Day 03
I found my self solving this similar to how I did it in Prolog.
1. class methods.
2. ~min~ function using ~key=~.
3. lots of ~lambda~.

** DONE Day 04
1. Conditional expressions. ~C if Test else Default~.

** DONE Day 05
1. ~unittest~ for testing. At one point, I wrote ~ip = ...~ instead of ~self.ip = ..~ and my program went into an infinite loop. I needed to know which instructions are working and which are not. This is simple enough to use.
2. I shifted all ~intcode~ into a separate file.
3. Dicts for the first time.
4. Lots of classes.

** DONE Day 06
1. Breadth first search for the first part.
2. Lots of dicts

** DONE Day 07
1. Co-routines: finally a good situation to use and understand them.
2. Partial pattern matching, similar to Haskell.

** DONE Day 08
Row major access of 3 dimensional array. Nothing new.

** DONE Day 09
My modular design of ~intcode~ is coming in handy now. Most of current changes happened in memory module and the rest is mostly left alone, so debugging and changing the Memory class became very easy.
1. Used a subTest in unittest.
2. array.extend, and array('q') for 8 byte signed long long ints.

** DONE Day 10
Seems like brute force is the only way. Input is 36x36, so we need 36^4 > 1million lines. Since all points are integers, we can check the nearest point on each line using arithmetic, instead of brute forcing all points. What a cumbersome solution; isn't there any elegant way to do this? I just check my prolog solution, it was 173 lines. Let me see what python can provide.

1. ~functools.partial~ useful for partial application of arguments.
2. ~math.gcd~ was use full to find integer points on a line.
3. ~sort~ with key for first time.
4. My trigonometry was frustating bad. ~clock~ took a white to get right, I had to put pen on paper to get angles and co-ordinate system correct.
